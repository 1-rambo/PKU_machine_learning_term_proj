import numpy as np
import torch
import matplotlib.pyplot as plt
from utils import RED, ORTH, FTN
from tqdm import tqdm

if __name__ == "__main__":
    B = torch.tensor([[ 1.3823,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000,  0.0000],
        [ 0.6851,  1.2332,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000,  0.0000],
        [ 0.6833,  0.4359,  1.1583,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000,  0.0000],
        [ 0.6801,  0.4143, -0.5731,  1.2328,  0.0000,  0.0000,  0.0000,  0.0000,
          0.0000,  0.0000],
        [-0.6768, -0.4319, -0.2921, -0.3928,  1.0455,  0.0000,  0.0000,  0.0000,
          0.0000,  0.0000],
        [ 0.6881, -0.4141, -0.3057,  0.4260,  0.4116,  0.9663,  0.0000,  0.0000,
          0.0000,  0.0000],
        [-0.6823,  0.3880, -0.5670, -0.4139,  0.3172, -0.4677,  0.9986,  0.0000,
          0.0000,  0.0000],
        [-0.6886,  0.4173,  0.3031,  0.3965, -0.0790, -0.4159, -0.4914,  0.8056,
          0.0000,  0.0000],
        [-0.6892,  0.4037, -0.5677, -0.0307, -0.4920, -0.3300,  0.0095,  0.3993,
          0.7130,  0.0000],
        [-0.6793,  0.4087,  0.2830, -0.4272, -0.4000,  0.0676, -0.4923,  0.1981,
          0.3519,  0.7090]])

    #B = torch.tensor([[1, 0, 0],
    #                   [0, 1, 0],
    #                   [0, 0, 1]], dtype=torch.float64)
    # B = torch.tensor([[ 1.0912,  0.0000,  0.0000],
    #     [-0.3627,  1.0277,  0.0000],
    #     [ 0.3675,  0.5113,  0.8918]])
    # B = torch.tensor([[0.5, 0.5 ,0],
    #                    [0.5, 0, 0.5],
    #                    [0, 0.5, 0.5]])
    # B = torch.tensor([[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                    [0, 2, 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0, 0, 0, 0],
    #                    [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                    [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                    [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                    [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                    [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    #                    [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],
    #                    [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    #                    [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
    #                    [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
    #                    [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
    #                    [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
    #                    [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
    #                    [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
    #                    ])
    
    B = ORTH(RED(B))
    H = torch.inverse(B)
    U = FTN(H, 6)
    print(len(U))
    print(H)
    r2 = 0.0
    listx = []
    listy = []
    for i in range(551):
        listx.append(r2)
        r2 += 0.01
        listy.append(0)
    # print(listx)
    for i in U:
        # print(i, i @ B)
        dist = np.linalg.norm(i @ B)
        dist = dist * dist
        # print(dist)
        for j in range(550, -1, -1):
            # print(listx[j], dist)
            if listx[j] >= dist:
                listy[j] += 1
            else:
                break
    listy_log = np.log10(np.array(listy) + 1)
    plt.xlabel('rÂ²')
    plt.ylabel(r'$\log_{10}N(B,r)$')
    plt.plot(listx, listy_log)
    plt.show()
